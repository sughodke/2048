{"version":3,"sources":["helper.js","App.js","reportWebVitals.js","index.js"],"names":["getRandomInt","max","Math","floor","random","placeRandomPiece","board","size","length","x","y","i","initBoard","Array","map","fill","App","useState","gameState","setGameState","handleKeyDown","useCallback","evt","newBoard","direction","row","parseInt","xOffset","yOffset","srcValue","destX","destY","destValue","Error","e","moveBoard","key","console","log","directionFromKey","useEffect","document","addEventListener","removeEventListener","className","onKeyPress","alert","onClick","rowIdx","cell","cellIdx","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.279eb0a7.chunk.js","sourcesContent":["function getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nfunction placeRandomPiece(board) {\n  const size = board.length\n  const [x, y, i] = [getRandomInt(size), getRandomInt(size), getRandomInt(2)]\n\n  // go again if cell is occupied\n  if (board[x][y] !== 0)\n    placeRandomPiece(board)\n\n  board[x][y] = [2, 4][i]\n}\n\nexport function stub($stub) {\n  placeRandomPiece = $stub;\n}\n\nexport function initBoard(size = 4, randomPieces = 2) {\n  const board = [...Array(size)].map(x=>Array(size).fill(0))\n\n  for (let i = 0; i < 2; i++)\n    placeRandomPiece(board)\n\n  return board\n}\n\nexport function moveBoard(direction, gameState) {\n  const size = gameState.length\n  const newBoard = gameState.map(row => row.map(x => parseInt(x, 10)))\n\n  let [xOffset, yOffset] = [0, 0]\n  let [start, end, step] = [0, size, 1]\n\n  switch (direction) {\n    case 'up':\n      xOffset = -1\n      break\n    case 'left':\n      yOffset = -1\n      break\n    case 'down':\n      xOffset = 1\n      break\n    case 'right':\n      yOffset = 1\n      break\n    default:\n      return gameState\n  }\n\n  for (let x = 0; x < size; x++) {\n    for (let y = 0; y < size; y++) {\n      const srcValue = newBoard[x][y]\n      if (srcValue === 0) continue\n\n      newBoard[x][y] = 0\n\n      let [destX, destY] = [x, y]\n      let destValue\n      try {\n        do {\n          destX += xOffset\n          destY += yOffset\n          destValue = newBoard[destX][destY]\n        } while (destValue === 0)\n\n        if (destValue === srcValue) {\n          newBoard[destX][destY] = srcValue << 1\n        } else {\n          // oops went too far\n          throw new Error('go back one')\n        }\n      } catch (e) {\n        // got to the end of the board\n        newBoard[destX-xOffset][destY-yOffset] = srcValue\n      }\n    }\n  }\n\n  placeRandomPiece(newBoard)\n\n  return newBoard\n}\n\n","import './App.css'\nimport { useEffect, useCallback, useState } from 'react'\nimport { initBoard, moveBoard } from './helper'\n\nfunction directionFromKey(key) {\n  switch(key) {\n    case 'j':\n    case 'ArrowDown':\n      return 'down'\n\n    case 'k':\n    case 'ArrowUp':\n      return 'up'\n\n    case 'h':\n    case 'ArrowLeft':\n      return 'left'\n\n    case 'l':\n    case 'ArrowRight':\n      return 'right'\n\n    default:\n      console.log(`Ignoring ${key} since it is not a valid input`)\n  }\n}\n\nfunction App() {\n  const [gameState, setGameState] = useState(initBoard())\n\n  const handleKeyDown = useCallback((evt) => {\n    const { key } = evt\n    const direction = directionFromKey(key)\n\n    const newBoard = moveBoard(direction, gameState)\n    setGameState(newBoard)\n\n    // TODO isGameOver\n  }, [gameState, setGameState])\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown)\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [handleKeyDown])\n\n  return (\n    <div className=\"App\" onKeyPress={alert}>\n      <header className=\"App-header\">\n        2048\n        <button onClick={() => setGameState(initBoard())}>Reset</button>\n      </header>\n      <table className=\"App-board\"><tbody>{\n        gameState.map((row, rowIdx) => <tr key={rowIdx}>{\n          row.map((cell, cellIdx) => <td key={cellIdx}>{cell !== 0 && cell}</td>)\n        }</tr>)\n      }</tbody></table>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}