{"version":3,"sources":["helper.js","App.js","gesture.js","reportWebVitals.js","index.js"],"names":["getRandomInt","max","Math","floor","random","placeRandomPiece","board","size","length","x","y","i","initBoard","Array","map","fill","App","useState","gameState","setGameState","handleKeyDown","useCallback","evt","newBoard","direction","row","parseInt","xOffset","yOffset","srcValue","destX","destY","destValue","Error","e","moveBoard","key","console","log","directionFromKey","useEffect","document","addEventListener","id","func","deltaMin","swipe_det","sX","sY","eX","eY","directions","Object","freeze","UP","DOWN","RIGHT","LEFT","el","touchstart","t","touches","screenX","screenY","touchmove","touchend","deltaX","deltaY","abs","detectSwipe","_","removeEventListener","className","onKeyPress","alert","onClick","rowIdx","cell","cellIdx","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1169ff58.chunk.js","sourcesContent":["function getRandomInt(max) {\n  return Math.floor(Math.random() * max);\n}\n\nfunction placeRandomPiece(board) {\n  const size = board.length\n  const [x, y, i] = [getRandomInt(size), getRandomInt(size), getRandomInt(2)]\n\n  // go again if cell is occupied\n  if (board[x][y] !== 0)\n    placeRandomPiece(board)\n\n  board[x][y] = [2, 4][i]\n}\n\nexport function stub($stub) {\n  placeRandomPiece = $stub;\n}\n\nexport function initBoard(size = 4, randomPieces = 2) {\n  const board = [...Array(size)].map(x=>Array(size).fill(0))\n\n  for (let i = 0; i < 2; i++)\n    placeRandomPiece(board)\n\n  return board\n}\n\nexport function moveBoard(direction, gameState) {\n  const size = gameState.length\n  const newBoard = gameState.map(row => row.map(x => parseInt(x, 10)))\n\n  let [xOffset, yOffset] = [0, 0]\n  let [start, end, step] = [0, size, 1]\n\n  switch (direction) {\n    case 'up':\n      xOffset = -1\n      break\n    case 'left':\n      yOffset = -1\n      break\n    case 'down':\n      xOffset = 1\n      break\n    case 'right':\n      yOffset = 1\n      break\n    default:\n      return gameState\n  }\n\n  for (let x = 0; x < size; x++) {\n    for (let y = 0; y < size; y++) {\n      const srcValue = newBoard[x][y]\n      if (srcValue === 0) continue\n\n      newBoard[x][y] = 0\n\n      let [destX, destY] = [x, y]\n      let destValue\n      try {\n        do {\n          destX += xOffset\n          destY += yOffset\n          destValue = newBoard[destX][destY]\n        } while (destValue === 0)\n\n        if (destValue === srcValue) {\n          newBoard[destX][destY] = srcValue << 1\n        } else {\n          // oops went too far\n          throw new Error('go back one')\n        }\n      } catch (e) {\n        // got to the end of the board\n        newBoard[destX-xOffset][destY-yOffset] = srcValue\n      }\n    }\n  }\n\n  placeRandomPiece(newBoard)\n\n  return newBoard\n}\n\n","import './App.css'\nimport { useEffect, useCallback, useState } from 'react'\nimport { initBoard, moveBoard } from './helper'\nimport { detectSwipe } from './gesture'\n\nfunction directionFromKey(key) {\n  switch(key) {\n    case 'j':\n    case 'ArrowDown':\n    case 'up': // for gestures\n      return 'down'\n\n    case 'k':\n    case 'ArrowUp':\n    case 'down': // for gestures\n      return 'up'\n\n    case 'h':\n    case 'ArrowLeft':\n    case 'left':\n      return 'left'\n\n    case 'l':\n    case 'ArrowRight':\n    case 'right':\n      return 'right'\n\n    default:\n      console.log(`Ignoring ${key} since it is not a valid input`)\n  }\n}\n\nfunction App() {\n  const [gameState, setGameState] = useState(initBoard())\n\n  const handleKeyDown = useCallback((evt) => {\n    const { key } = evt\n    const direction = directionFromKey(key)\n\n    const newBoard = moveBoard(direction, gameState)\n    setGameState(newBoard)\n\n    // TODO isGameOver\n  }, [gameState, setGameState])\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown)\n    const { touchstart, touchend, touchmove } =\n      detectSwipe(document, (_, key) => handleKeyDown({ key }))\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown)\n      document.removeEventListener('touchstart', touchstart)\n      document.removeEventListener('touchend', touchend)\n      document.removeEventListener('touchmove', touchmove)\n    }\n  }, [handleKeyDown])\n\n  return (\n    <div className=\"App\" onKeyPress={alert}>\n      <header className=\"App-header\">\n        2048\n        <button onClick={() => setGameState(initBoard())}>Reset</button>\n      </header>\n      <table className=\"App-board\"><tbody>{\n        gameState.map((row, rowIdx) => <tr key={rowIdx}>{\n          row.map((cell, cellIdx) => <td key={cellIdx}>{cell !== 0 && cell}</td>)\n        }</tr>)\n      }</tbody></table>\n    </div>\n  );\n}\n\nexport default App;\n","// https://stackoverflow.com/a/58719294/721564\n\n// Tune deltaMin according to your needs. Near 0 it will almost\n// always trigger, with a big value it can never trigger.\nexport function detectSwipe(id, func, deltaMin = 90) {\n  const swipe_det = {\n    sX: 0,\n    sY: 0,\n    eX: 0,\n    eY: 0\n  }\n  // Directions enumeration\n  const directions = Object.freeze({\n    UP: 'up',\n    DOWN: 'down',\n    RIGHT: 'right',\n    LEFT: 'left'\n  })\n  let direction = null\n  const el = document // .getElementById(id)\n\n  function touchstart(e) {\n    const t = e.touches[0]\n    swipe_det.sX = t.screenX\n    swipe_det.sY = t.screenY\n  }\n  function touchmove(e) {\n    // Prevent default will stop user from scrolling, use with care\n    // e.preventDefault();\n    const t = e.touches[0]\n    swipe_det.eX = t.screenX\n    swipe_det.eY = t.screenY\n  }\n  function touchend(e) {\n    const deltaX = swipe_det.eX - swipe_det.sX\n    const deltaY = swipe_det.eY - swipe_det.sY\n    // Min swipe distance, you could use absolute value rather\n    // than square. It just felt better for personnal use\n    if (deltaX ** 2 + deltaY ** 2 < deltaMin ** 2) return\n    // horizontal\n    if (deltaY === 0 || Math.abs(deltaX / deltaY) > 1)\n      direction = deltaX > 0 ? directions.RIGHT : directions.LEFT\n    else // vertical\n      direction = deltaY > 0 ? directions.UP : directions.DOWN\n\n    if (direction && typeof func === 'function') func(el, direction)\n\n    direction = null\n  }\n  el.addEventListener('touchstart', touchstart\n    , false)\n  el.addEventListener('touchmove', touchmove\n    , false)\n  el.addEventListener('touchend', touchend\n    , false)\n\n  return { touchstart, touchend, touchmove }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}